// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | VAR
  | IF
  | ELSE
  | LBRACE
  | RBRACE
  | LPAREN
  | RPAREN
  | INCR
  | DESINCR
  | AND
  | DOT
  | FUN
  | EQUAL
  | WORD
  | STRING
type tokenId = 
    | TOKEN_EOF
    | TOKEN_VAR
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_INCR
    | TOKEN_DESINCR
    | TOKEN_AND
    | TOKEN_DOT
    | TOKEN_FUN
    | TOKEN_EQUAL
    | TOKEN_WORD
    | TOKEN_STRING
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_File
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ( AbstractSyntax.Prog ) 
