%{
open AbstractSyntax
%}

%start start
%token <string> NAME
%token <int> INT
%token LBRACE RBRACE
%token LPAREN RPAREN
%token PLUS MINUS
%token VAR IF ELSE INCR USE
%token FUN ARROW RETURN
%token GREATER LESS GREATEREQUAL LESSEQUAL
%token SEMI COMMA
%token DESINCR AND DOT EQUAL STRING
%token EOF
%type < AbstractSyntax.Prog > start


%%


start: File EOF { $1 } 


File: StatementList { Program(List.rev($1)) }

PropertyInitializer: NAME EQUAL Expression                                 { PropertySetter($1, $3) }

PropertiesInitializer: PropertyInitializer                                 { [$1] }
                     | PropertiesInitializer COMMA PropertyInitializer     { $3::$1 }

Variable: NAME                                                             { Variable($1) }
        | Variable DOT NAME                                                { Property($1, $3) }

Expression: Variable LPAREN RPAREN                                         { Call($1) }
          | Variable                                                       { Get($1) }
          | INT                                                            { Int($1) }
          | LBRACE RBRACE                                                  { New([]) }
          | LBRACE PropertiesInitializer RBRACE                            { New(List.rev($2)) }
          | USE LPAREN NAME RPAREN                                         { Use($3) }
          | FUN LPAREN RPAREN ARROW Expression                             { Fun([], [Return($5)]) }
          | FUN LPAREN RPAREN ARROW LBRACE StatementList RBRACE            { Fun([], List.rev($6)) }
          | Expression GREATER Expression                                  { Greater($1, $3) }
          | Expression LESS Expression                                     { Less($1, $3) }
          | Expression GREATEREQUAL Expression                             { GreaterOrEqual($1, $3) }
          | Expression LESSEQUAL Expression                                { LessOrEqual($1, $3) }
          | Expression PLUS Expression                                     { Add($1, $3) }

Statement: VAR NAME EQUAL Expression                                       { Create($2, $4) }
         | Variable EQUAL Expression                                       { Assign($1, $3) }
         | RETURN Expression                                               { Return($2) }

StatementList: Statement SEMI                                              { [$1] }
             | StatementList Statement SEMI                                { $2::$1 }