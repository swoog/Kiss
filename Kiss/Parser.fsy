%{
open AbstractSyntax
%}

%start start
%token <string> NAME
%token <int> INT
%token LBRACE RBRACE
%token LPAREN RPAREN
%token PLUS MINUS
%token VAR IF ELSE INCR USE
%token FUN ARROW RETURN
%token DESINCR AND DOT EQUAL STRING SEMI
%token EOF
%type < AbstractSyntax.Prog > start


%%


start: File EOF { $1 } 


File: StatementList { Program(List.rev($1)) }

Expression: INT                                                   { Int($1) }
          | NAME LPAREN RPAREN                                    { Call($1) }
          | NAME                                                  { Variable($1) }
          | LBRACE RBRACE                                         { New }
          | USE LPAREN NAME RPAREN                                { Use($3) }
          | FUN LPAREN RPAREN ARROW LBRACE StatementList RBRACE   { Fun([], List.rev($6)) }
          | FUN LPAREN RPAREN ARROW Expression                    { Fun([], [Return($5)]) }
          | Expression PLUS Expression                            { Add($1, $3) }

Statement: VAR NAME EQUAL Expression                              { Create($2, $4) }
         | NAME EQUAL Expression                                  { Assign($1, $3) }
         | RETURN Expression                                      { Return($2) }

StatementList: Statement SEMI                                     { [$1] }
             | StatementList Statement SEMI                       { $2::$1 }