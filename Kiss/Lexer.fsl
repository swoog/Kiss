{
module Lexer 

open Parser
open Microsoft.FSharp.Text.Lexing

let newline (lexbuf: LexBuffer<_>) =  
   lexbuf.EndPos <- lexbuf.EndPos.NextLine 

let lexeme = LexBuffer<_>.LexemeString
}

let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')


rule token = parse
| whitespace                                          { token lexbuf }
| newline                                             { newline lexbuf; token lexbuf }
| "true"                                              { TRUE }
| "false"                                             { FALSE }
| "var"                                               { VAR }
| "return"                                            { RETURN }
| "if"                                                { IF }
| "else"                                              { ELSE }
| "{"                                                 { LBRACE }
| "}"                                                 { RBRACE }
| "("                                                 { LPAREN }
| ")"                                                 { RPAREN }
| ">"                                                 { GREATER }
| "<"                                                 { LESS }
| ">="                                                { GREATEREQUAL }
| "<="                                                { LESSEQUAL }
| "->"                                                { ARROW }
| "++"                                                { INCR }
| "--"                                                { DESINCR }
| "&&"                                                { AND }
| "."                                                 { DOT }
| "use"                                               { USE }
| "fun"                                               { FUN }
| ","                                                 { COMMA }
| "+"                                                 { PLUS }
| "-"                                                 { MINUS }
| "="                                                 { EQUAL }
| ";"                                                 { SEMI }
| ['0'-'9']+                                          { INT(int(lexeme lexbuf)) }
| ['a'-'z''A'-'Z']['a'-'z''A'-'Z''0'-'9']*            { NAME(lexeme lexbuf) }
| ['"']                                               { stringToken "" false lexbuf }
| _                                                   { failwith ("Parse error on " + LexBuffer<_>.LexemeString lexbuf) }
| eof                                                 { EOF }

and stringToken str ignorequote = parse
| '"'           { if ignorequote  then (stringToken (str+"\"") false lexbuf) else STRING (str) } 
| '\\'          { stringToken str true lexbuf } 
| [^ '"' '\\']+ { stringToken (str+(lexeme lexbuf)) false lexbuf } 
| eof           { failwith ("String is not terminated") } 
