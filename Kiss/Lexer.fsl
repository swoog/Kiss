{
module Lexer 

open Parser
open Microsoft.FSharp.Text.Lexing

let newline (lexbuf: LexBuffer<_>) =  
   lexbuf.StartPos <- lexbuf.StartPos.NextLine 

let lexeme = LexBuffer.LexemeString
}

let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')


rule token = parse
| whitespace                                          { token lexbuf }
| newline                                             { newline lexbuf; token lexbuf }
| "var"                                               { VAR }
| "if"                                                { IF }
| "else"                                              { ELSE }
| "{"                                                 { LBRACE }
| "}"                                                 { RBRACE }
| "("                                                 { LPAREN }
| ")"                                                 { RPAREN }
| "++"                                                { INCR }
| "--"                                                { DESINCR }
| "&&"                                                { AND }
| "."                                                 { DOT }
| "fun"                                               { FUN }
| "+"                                                 { PLUS }
| "-"                                                 { MINUS }
| "="                                                 { EQUAL }
| ['0'-'9']+                                          { INT(int(lexeme lexbuf)) }
| ['a'-'z''A'-'Z']['a'-'z''A'-'Z''0'-'9']*            { NAME(lexeme lexbuf) }
| ""                                                  { STRING }
| _                                                   { failwith ("Parse error on " + LexBuffer<_>.LexemeString lexbuf) }
| eof                                                 { EOF }
